/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   README                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: gro-donn <gro-donn@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/14 15:00:38 by gro-donn          #+#    #+#             */
/*   Updated: 2024/11/15 17:12:03 by gro-donn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

https://42-cursus.gitbook.io/guide/rank-01/get_next_line/commented-solution
  * fd < 0 : this means the file descriptor is invalid
     * BUFFER_SIZE <= 0 : we'll read BUFFER_SIZE characters at a time,
     * we can't read 0 or less character
     * read(fd, 0, 0) < 0 : this check lets us see if the file exists and
     * that it has some content to read from, or event that the file is 
     * openable to read, maybe the file descriptor is more than 0, but it
     * was open in 'modify only', that means we can't read it.
     */

      /* We have to free the buffer variable here since we'll not be using
     * it later in the function, freeing it prevents memory leaks.
     */

    
        This condition checks if the number of bytes read is greater than 0.
        The loop will continue as long as there are bytes being read from the file.
        If bytes_read is 0, it means that the end of the file has been reached, and the loop will terminate.
        If bytes_read is -1, it indicates an error, and you would typically handle that case
         (e.g., by breaking out of the loop or logging an error).

Summary:

In summary, this line of code is part of a loop that continuously reads data from a file until either:

    No more data is available (EOF is reached, indicated by bytes_read being 0).
    An error occurs during the read operation (indicated by bytes_read being -1).

The loop allows you to process the data read from the file in chunks, which is more efficient than 
reading one byte at a time. Each iteration of the loop will read up to BUFFER_SIZE bytes into buffer, 
and you can then process that data as needed.