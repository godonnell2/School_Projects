/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   README                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: gro-donn <gro-donn@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/14 15:00:38 by gro-donn          #+#    #+#             */
/*   Updated: 2024/11/22 19:03:46 by gro-donn         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#include "get_next_line.h"
#include <stdio.h>
/*
cc get_next_line.c get_next_line_utils.c main.c  && ./a.out 
ok so we need four functions
main one to call everything and do protections
READ , from read to my buffer in a loop buffer could be small after each time you 've 
read you check to find if you find a newline. if you dont find you continue so 
they you call the read function again 
when you do find the newline copy the line from your store into a new string strdup eg
move everything after your newline into the beginning of the store (moving it back)
and then you can return the dup string


*/
 /*
     * read(fd, 0, 0) < 0 : this check lets us see if the file exists and
     * that it has some content to read from, or event that the file is 
     * openable to read, maybe the file descriptor is more than 0, but it
     * was open in 'modify only', that means we can't read it.
     */

/*

/*
create if nonexistsent
truncate if it exists let me overwrite

check if -1 is kinda like check for null

void fd will allow you to use this fn without using this parametor
The read function will fill the store with the character read.
*/
// NEED A STORE VAR ?? needs to hold a char* of indeterminate size
//(void) fd;
// printf("You entered: %s\n", existing_content);
// ssize_t read(int, void *, size_t)
// NEED TO PUT READ IN THE LOOOP CONDITOON!!!!
// printf("bytes_read:%zu,", bytes_read);


https://42-cursus.gitbook.io/guide/rank-01/get_next_line/commented-solution
  * fd < 0 : this means the file descriptor is invalid
     * BUFFER_SIZE <= 0 : we'll read BUFFER_SIZE characters at a time,
     * we can't read 0 or less character
     * read(fd, 0, 0) < 0 : this check lets us see if the file exists and
     * that it has some content to read from, or event that the file is 
     * openable to read, maybe the file descriptor is more than 0, but it
     * was open in 'modify only', that means we can't read it.
     */

      /* We have to free the buffer variable here since we'll not be using
     * it later in the function, freeing it prevents memory leaks.
     */

    
        This condition checks if the number of bytes read is greater than 0.
        The loop will continue as long as there are bytes being read from the file.
        If bytes_read is 0, it means that the end of the file has been reached, and the loop will terminate.
        If bytes_read is -1, it indicates an error, and you would typically handle that case
         (e.g., by breaking out of the loop or logging an error).

Summary:
